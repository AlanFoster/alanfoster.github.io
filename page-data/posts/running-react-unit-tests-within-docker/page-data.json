{"componentChunkName":"component---src-templates-post-index-js","path":"/posts/running-react-unit-tests-within-docker/","result":{"data":{"markdownRemark":{"html":"<p>Docker is a great way to provide a consistent environment for running your development environment, test suite, as well as your production servers. It provides an easy method of specifying the environment requirements, dependencies, as well as your required linux distribution.</p>\n<p>For instance; If you are making use of automated tests as part of your Continuous Integration pipeline, it can be useful to know how to run your JavaScript tests within a docker container.</p>\n<!-- end-excerpt -->\n<h3 id=\"your-application\" style=\"position:relative;\"><a href=\"#your-application\" aria-label=\"your application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your application</h3>\n<p>This post assumes that you have a React/JavaScript application ready to be tested.</p>\n<p>For this post I will assume that we're using <a href=\"https://github.com/react-community/create-react-native-app\">create-react-native-app</a>:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> create-react-app\ncreate-react-app my-app\n<span class=\"token builtin class-name\">cd</span> my-app</code></pre>\n              </div>\n            </div>\n          \n<p>You should be able to confirm that your react application is running as expected with:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start\n\nCompiled successfully<span class=\"token operator\">!</span>\n\nYou can now view my-app <span class=\"token keyword\">in</span> the browser.\n\n  Local:            http://localhost:3000/\n  On Your Network:  http://192.168.1.160:3000/</code></pre>\n              </div>\n            </div>\n          \n<p>You should be able to confirm that all tests are running as expected with:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n\n PASS  src/App.test.js\n  ✓ renders without crashing <span class=\"token punctuation\">(</span>24ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">1</span>.14s\nRan all <span class=\"token builtin class-name\">test</span> suites related to changed files.\n\nWatch Usage\n › Press p to filter by a filename regex pattern.\n › Press t to filter by a <span class=\"token builtin class-name\">test</span> name regex pattern.\n › Press q to quit <span class=\"token function\">watch</span> mode.\n › Press Enter to trigger a <span class=\"token builtin class-name\">test</span> run.</code></pre>\n              </div>\n            </div>\n          \n<h3 id=\"installing-docker\" style=\"position:relative;\"><a href=\"#installing-docker\" aria-label=\"installing docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing docker</h3>\n<p>The first step is installing docker. The specific installation steps will be different if you are on a windows machine, mac, etc.</p>\n<p>Please see the latest install steps at <a href=\"https://www.docker.com\">https://www.docker.com</a>.</p>\n<p>You should be able to verify that your local install is running with:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run hello-world\n\nlatest: Pulling from library/hello-world\n78445dd45222: Pull complete\nDigest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7\nStatus: Downloaded newer image <span class=\"token keyword\">for</span> hello-world:latest\n\nHello from Docker<span class=\"token operator\">!</span></code></pre>\n              </div>\n            </div>\n          \n<h3 id=\"containers-and-images\" style=\"position:relative;\"><a href=\"#containers-and-images\" aria-label=\"containers and images permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Containers and images</h3>\n<p>A docker image is the built blueprint of the environment that you want. It is built from a <code>Dockerfile</code> which specifies the environment and software requirements.</p>\n<p>A container is a running instance of a docker image. There can be many instances of the same docker image.</p>\n<h3 id=\"creating-a-docker-file\" style=\"position:relative;\"><a href=\"#creating-a-docker-file\" aria-label=\"creating a docker file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a docker file</h3>\n<p>Docker depends on having a <code>Dockerfile</code> which specifies the environment and software requirements.</p>\n<p>Create a new Docker file with:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> Dockerfile</code></pre>\n              </div>\n            </div>\n          \n<p>With the following content:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:8.0.0-alpine</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> mkdir /srv/example</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /srv/example</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package.json yarn.lock ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> yarn &amp;&amp; yarn cache clean</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span></code></pre>\n              </div>\n            </div>\n          \n<p>Docker will run sequentially through each line within the docker file.</p>\n<ul>\n<li><code>FROM node:8.0.0-alpine</code> - For our application we wish to run on an environment that has node and yarn installed. Thankfully this is a common requirement and there are various base docker images that can be used and searched for within the <a href=\"https://hub.docker.com/\">docker hub</a>. In our case we can specify a node version from the <a href=\"https://hub.docker.com/_/node/\">node official repository</a>. In particular we will make use of the Alpine linux distro, which is small - at only around 5MB.</li>\n<li><code>RUN mkdir /srv/app</code> - Create a new folder to contain our application</li>\n<li><code>WORKDIR /srv/app</code> - Specify the working directory for future commands such as <code>COPY</code>, <code>ADD</code>, etc.</li>\n<li><code>COPY package.json yarn.lock ./</code> - Place the required dependency files onto our image. Note that the copy command follows the pattern <code>COPY &#x3C;src>... &#x3C;dest></code></li>\n<li><code>RUN yarn &#x26;&#x26; yarn cache clean</code> Install our dependencies and remove the cache in one operation.</li>\n<li><code>COPY . .</code> Copy the rest of the files within our daemon context into our working directory.</li>\n</ul>\n<p>Remember: With Docker, order matters. Docker will run each instruction independently, and if possible Docker will attempt to re-use intermediate steps if possible. This is why we chose to copy across our <code>package.json</code> and <code>yarn.lock</code> before running the <code>yarn</code> install command. Importantly, we wish for any changes to these files to invalidate the next docker step and download the updated dependencies. However we don't wish to download our dependencies again if other unrelated files change. The atomic nature of the <code>RUN</code> command explains explains why we delete our yarn cache too, as we don't want for these files to be cached by Docker and create an necessarily large docker image.</p>\n<h3 id=\"reducing-files-sent-to-the-docker-daemon\" style=\"position:relative;\"><a href=\"#reducing-files-sent-to-the-docker-daemon\" aria-label=\"reducing files sent to the docker daemon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducing files sent to the docker daemon</h3>\n<p>When building a docker image the current directory's contents are sent to the running docker daemon. If you are working in a local development environment this can be a bad idea. For instance this may copy across all of the contents of your <code>node_modules</code> directory leading to slow docker build times. Even worse there is the potential of copying various <code>.env</code> files into your docker container - which could contain environment variables such as keys and passwords that you definitely do not want to distribute by accident.</p>\n<p>Thankfully, similar to a <code>.gitignore</code> file, you can specify a <code>.dockerignore</code> file.</p>\n<p>Create a new <code>.dockerignore</code> file with the following content:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Ignore all files by default</span>\n*\n\n<span class=\"token comment\"># White list only the required files</span>\n<span class=\"token operator\">!</span>src/\n<span class=\"token operator\">!</span>public/\n<span class=\"token operator\">!</span>package.json\n<span class=\"token operator\">!</span>yarn.lock</code></pre>\n              </div>\n            </div>\n          \n<p>In my experience I prefer white-listing rather than black listing files for docker. It is better for a docker build to break because you forgot to white list an additional dependency, than it is to have secrets shared without realizing.</p>\n<p><em>Note</em>: If you are creating a dockerignore file for your own project, you may wish to include additional files such as <code>.babelrc</code>, <code>.eslint</code> etc. Particularly if you are planning to run linting rules as part of your CI pipeline.</p>\n<h3 id=\"using-docker-compose\" style=\"position:relative;\"><a href=\"#using-docker-compose\" aria-label=\"using docker compose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using docker compose</h3>\n<p>Docker compose allows you to manage multi-container docker applications. In our case we can use it to build our image and run a one-of command to verify that our tests are working.</p>\n<p>Create a new file <code>docker-compose.yml</code> with the content:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> CI=true\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> npm test</code></pre>\n              </div>\n            </div>\n          \n<p>The following commands will now build our image, as well as execute <code>npm test</code>:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker-compose</span> build <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token punctuation\">..</span>.\n\n$ <span class=\"token function\">docker-compose</span> run <span class=\"token parameter variable\">--rm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token function\">npm</span> info it worked <span class=\"token keyword\">if</span> it ends with ok\n<span class=\"token function\">npm</span> info using npm@5.0.0\n<span class=\"token function\">npm</span> info using node@v8.0.0\n<span class=\"token function\">npm</span> info lifecycle my-app@0.1.0~pretest: my-app@0.1.0\n<span class=\"token function\">npm</span> info lifecycle my-app@0.1.0~test: my-app@0.1.0\n\n<span class=\"token operator\">></span> my-app@0.1.0 <span class=\"token builtin class-name\">test</span> /srv/example\n<span class=\"token operator\">></span> react-scripts <span class=\"token builtin class-name\">test</span> <span class=\"token parameter variable\">--env</span><span class=\"token operator\">=</span>jsdom\n\n PASS  src/App.test.js\n  ✓ renders without crashing <span class=\"token punctuation\">(</span>29ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">1</span>.284s\nRan all <span class=\"token builtin class-name\">test</span> suites.\n<span class=\"token function\">npm</span> info lifecycle my-app@0.1.0~posttest: my-app@0.1.0\n<span class=\"token function\">npm</span> info ok</code></pre>\n              </div>\n            </div>\n          \n<p>Note that within our docker-compose file we also needed to specify the environment variable <code>CI=true</code> - otherwise by default jest will run in <code>--watch</code> mode.</p>\n<p>Additionally we have specified the <code>--rm</code> option within our run command, to delete our container after the command completes.</p>\n<p>Importantly, if our test fails - the correct status code will be returned. This is useful to break your build in a CI environment:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker-compose</span> run <span class=\"token parameter variable\">--rm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token punctuation\">..</span>.\n\n FAIL  src/App.test.js\n  ● renders without crashing\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\n<span class=\"token number\">1</span></code></pre>\n              </div>\n            </div>\n          \n<h3 id=\"docker-for-development\" style=\"position:relative;\"><a href=\"#docker-for-development\" aria-label=\"docker for development permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker for development</h3>\n<p>It is also possible to use docker for development. This is useful when you wish for all developers to have the same development environment, and as close to production as possible.</p>\n<p>We can modify the <code>docker-compose.yml</code> file to have an additional <code>dev</code> service:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">dev</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 3000<span class=\"token punctuation\">:</span><span class=\"token number\">3000</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> npm start\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"./src:/srv/example/src\"</span>\n\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> CI=true\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> npm test</code></pre>\n              </div>\n            </div>\n          \n<p>This adds an additional <code>dev</code> service which will run <code>npm start</code>, and expose port 3000 within the docker container onto port 3000 on the host machine.</p>\n<p>An important addition is the <code>volumes</code> keys, which maps the current host machine's src directory onto <code>/srv/example/src</code> within the docker container. This means that any local file changes will reflected within our docker container. This is useful as by default the <code>create-react-app</code> has hot module reloading enabled, and any code changes made on the host machine will automatically reload your browser.</p>\n<p>We can run this container with:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker-compose</span> build dev\n\n<span class=\"token punctuation\">..</span>.\n\n$ <span class=\"token function\">docker-compose</span> up dev\n\nCreating myapp_dev_1\nAttaching to myapp_dev_1\ndev_1   <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> info it worked <span class=\"token keyword\">if</span> it ends with ok\ndev_1   <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> info using npm@5.0.0\ndev_1   <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> info using node@v8.0.0\ndev_1   <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> info lifecycle my-app@0.1.0~prestart: my-app@0.1.0\ndev_1   <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> info lifecycle my-app@0.1.0~start: my-app@0.1.0\ndev_1   <span class=\"token operator\">|</span>\ndev_1   <span class=\"token operator\">|</span> <span class=\"token operator\">></span> my-app@0.1.0 start /srv/example\ndev_1   <span class=\"token operator\">|</span> <span class=\"token operator\">></span> react-scripts start\ndev_1   <span class=\"token operator\">|</span>\ndev_1   <span class=\"token operator\">|</span> Starting the development server<span class=\"token punctuation\">..</span>.\ndev_1   <span class=\"token operator\">|</span>\ndev_1   <span class=\"token operator\">|</span> Compiled successfully<span class=\"token operator\">!</span>\ndev_1   <span class=\"token operator\">|</span>\ndev_1   <span class=\"token operator\">|</span> You can now view my-app <span class=\"token keyword\">in</span> the browser.\ndev_1   <span class=\"token operator\">|</span>\ndev_1   <span class=\"token operator\">|</span>   Local:            http://localhost:3000/\ndev_1   <span class=\"token operator\">|</span>   On Your Network:  http://172.20.0.2:3000/\ndev_1   <span class=\"token operator\">|</span>\ndev_1   <span class=\"token operator\">|</span> Note that the development build is not optimized.\ndev_1   <span class=\"token operator\">|</span> To create a production build, use <span class=\"token function\">yarn</span> run build.\ndev_1   <span class=\"token operator\">|</span></code></pre>\n              </div>\n            </div>\n          \n<p>Note that we are making use of <code>docker-compose up</code> rather than the previous <code>run</code> command.</p>\n<h3 id=\"create-a-makefile\" style=\"position:relative;\"><a href=\"#create-a-makefile\" aria-label=\"create a makefile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a makefile</h3>\n<p>It's never fun to remember arbitrary commands. Let's introduce a makefile to streamline the dev process:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">.PHONY: dev <span class=\"token builtin class-name\">test</span> <span class=\"token builtin class-name\">help</span>\n.DEFAULT_GOAL: <span class=\"token builtin class-name\">help</span>\n\ndefault: <span class=\"token builtin class-name\">help</span>\n\nhelp: <span class=\"token comment\">## Output available commands</span>\n\t@echo <span class=\"token string\">\"Available commands:\"</span>\n\t@echo\n\t@fgrep <span class=\"token parameter variable\">-h</span> <span class=\"token string\">\"##\"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>MAKEFILE_LIST<span class=\"token variable\">)</span></span> <span class=\"token operator\">|</span> <span class=\"token function\">fgrep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">fgrep</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/\\\\$$//'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/##//'</span>\n\ndev:  <span class=\"token comment\">## Run a development environment on port 3000</span>\n\t@docker-compose build dev\n\t@docker-compose up dev\n\ntest: <span class=\"token comment\">## Run the current test suite</span>\n\t@docker-compose build <span class=\"token builtin class-name\">test</span>\n\t@docker-compose run <span class=\"token parameter variable\">--rm</span> <span class=\"token builtin class-name\">test</span></code></pre>\n              </div>\n            </div>\n          \n<p><em>Note</em>: Makefiles should use tabs, rather than spaces.</p>\n<p>If we're unsure what commands are available to us, we can just run <code>make help</code>:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\">Available commands:\n\nhelp:  Output available commands\ndev:   Run a development environment on port <span class=\"token number\">3000</span>\ntest:  Run the current <span class=\"token builtin class-name\">test</span> suite</code></pre>\n              </div>\n            </div>\n          \n<p>For instance, to run the test target you can use:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span></code></pre>\n              </div>\n            </div>\n          \n<h3 id=\"sources\" style=\"position:relative;\"><a href=\"#sources\" aria-label=\"sources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sources</h3>\n<p>The full source code can be found at <a href=\"https://github.com/AlanFoster/create-react-app-docker-unit-tests\">create-react-app-docker-unit-tests</a></p>\n<h3 id=\"additional-useful-docker-commands\" style=\"position:relative;\"><a href=\"#additional-useful-docker-commands\" aria-label=\"additional useful docker commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional useful Docker commands</h3>\n<p>To view all of the currently running docker instances:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre>\n              </div>\n            </div>\n          \n<p>To open an interactive terminal into one of your running instances:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> DOCKER_PID /bin/sh</code></pre>\n              </div>\n            </div>\n          \n<p>To create a temporary docker container, enter a shell, then delete the container after:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> IMAGE_NAME /bin/sh</code></pre>\n              </div>\n            </div>\n          \n<p>To view the available docker logs:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> logs <span class=\"token parameter variable\">-f</span> DOCKER_PID</code></pre>\n              </div>\n            </div>\n          ","frontmatter":{"title":"Running react unit tests within docker","date":"03 June, 2017"},"fields":{"slug":"/posts/running-react-unit-tests-within-docker/","editURL":"https://github.com/AlanFoster/alanfoster.github.io/edit/develop/src/pages/posts/running-react-unit-tests-within-docker/index.markdown"}}},"pageContext":{"sidebarPath":null,"slug":"/posts/running-react-unit-tests-within-docker/"}},"staticQueryHashes":[]}