{"data":{"markdownRemark":{"html":"<p>Page objects can be used as a powerful method of abstracting your tests from implementation. Importantly they can be used reduce fragile tests, and promote DRYness - via the encapsulation of common functionality within simple methods.</p>\n<p>In plain terms:</p>\n<blockquote>\n<p>A page object is an instance of a <code>class</code> which abstracts the underlying user interface from your tests, providing methods to interact with the UI, and extract any required information.</p>\n</blockquote>\n<h3 id=\"terminology\"><a href=\"#terminology\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terminology</h3>\n<p>Unfortunately page objects are an overloaded term. In my experience there are generally three types of page objects:</p>\n<ul>\n<li>\n<p><em>Component Objects</em> - A page object which represents a particular component, or widget, on a user interface. For instance a Table, menu, article, etc.</p>\n<p>If you are coming from a React background, React components/Classes are generally a one to one mapping with this concept.</p>\n</li>\n<li>\n<p><em>Page Objects</em> - A page object can describe a particular screen, or user interface, within a web application or native application. It can be composed of multiple component objects, and can provide convenience methods for interacting with the abstraction that it is wrapping.</p>\n</li>\n<li>\n<p><em>Experience</em> - These are commonly used to group together complex functionality that may require multiple steps, and interact with multiple pages. In my experience I have used this concept to abstract complex welcome tour functionality, creation wizards, and other complex flows.</p>\n</li>\n</ul>\n<h3 id=\"example\"><a href=\"#example\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h3>\n<p>Consider a simple RSpec Capybara test that creates blogs and does not make use of page objects:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">require &#39;feature_helper&#39;\n\nfeature &#39;Blog management&#39;, type: :feature do\n  scenario &#39;Successfully creating a new blog&#39; do\n    visit &#39;/&#39;\n\n    click_on &#39;Form Examples&#39;\n    expect(page).to have_content(&#39;Create Blog&#39;)\n\n    fill_in &#39;blog_title&#39;, with: &#39;My Blog Title&#39;\n    fill_in &#39;blog_text&#39;, with: &#39;My new blog text&#39;\n\n    click_on &#39;Save Blog&#39;\n    expect(page).to have_selector(&#39;.blog--show&#39;)\n\n    expect(page).to have_content(&#39;My Blog Title&#39;)\n    expect(page).to have_content(&#39;My new blog text&#39;)\n  end\n\n  scenario &#39;Entering no data&#39; do\n    visit &#39;/&#39;\n    click_on &#39;Form Examples&#39;\n\n    expect(page).to have_content(&#39;Create Blog&#39;)\n\n    click_on &#39;Save Blog&#39;\n\n    expect(page).to have_content(&#39;4 errors stopped this form being submitted&#39;)\n\n    expect(page).to have_content(&quot;Title can&#39;t be blank&quot;)\n    expect(page).to have_content(&quot;Text can&#39;t be blank&quot;)\n\n    expect(page).to have_content(&#39;Title is too short&#39;)\n    expect(page).to have_content(&#39;Text is too short&#39;)\n  end\nend</code></pre>\n              </div>\n            </div>\n          \n<p>Looking at this snippet - there are multiple concerns. There is the act of navigating to the appropriate page, interacting with the page, and asserting content. It is also possible to see duplicated code that could potentially be more DRY.</p>\n<p>Importantly this code can become difficult to maintain if there are changes to application under test. For instance element classes/names/ids may change, there will be multiple places of update required.</p>\n<p>There is also a lack of 'semantic context' within this code, it can be hard to see what lines of code are logically grouped together.</p>\n<h3 id=\"introducing-page-objects\"><a href=\"#introducing-page-objects\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introducing Page Objects</h3>\n<p>As discussed within the terminology section, Page Objects can be used to provide abstractions for the view layer.</p>\n<p>Taking the previous example, and introducing a PageObject for creating new blogs, and viewing blogs, we can begin to clear up our previous example.</p>\n<p>Without providing specific implementation details, the end-goal should be readable, and lacking specific user interface details should as class names, xpaths etc:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">require &#39;feature_helper&#39;\nrequire_relative &#39;../pages/new_blog&#39;\nrequire_relative &#39;../pages/view_blog&#39;\n\nfeature &#39;Blog management&#39;, type: :feature do\n  let(:new_blog_page) { ::Pages::NewBlog.new }\n  let(:view_blog_page) { ::Pages::ViewBlog.new }\n\n  before :each do\n    new_blog_page.visit_location\n  end\n\n  scenario &#39;Successfully creating a new blog&#39; do\n    new_blog_page.create title: &#39;My Blog Title&#39;,\n                         text: &#39;My new blog text&#39;\n\n    expect(view_blog_page).to have_loaded\n    expect(view_blog_page).to have_blog title: &#39;My Blog Title&#39;,\n                                        text: &#39;My new blog text&#39;\n  end\n\n  scenario &#39;Entering no data&#39; do\n    new_blog_page.create title: &#39;&#39;,\n                         text: &#39;&#39;\n\n    expect(view_blog_page).to_not have_loaded\n    expect(new_blog_page).to have_errors &quot;Title can&#39;t be blank&quot;,\n                                         &quot;Text can&#39;t be blank&quot;,\n                                         &quot;Title is too short&quot;,\n                                         &quot;Text is too short&quot;\n  end\nend</code></pre>\n              </div>\n            </div>\n          \n<h3 id=\"creating-page-objects\"><a href=\"#creating-page-objects\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Page Objects</h3>\n<p>The first step of creating page objects is to create the basic page class structure:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">module Pages\n  class NewBlog\n    include RSpec::Matchers\n    include Capybara::DSL\n\n    # ...\n  end\nend</code></pre>\n              </div>\n            </div>\n          \n<p>The inclusion of <code>Capybara::DSL</code> will allow for instances of the Page Object to have access to Capybara's domain specific language:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">has_css? &#39;.foo&#39;\nhas_content? &#39;hello world&#39;\nfind(&#39;.foo&#39;).click</code></pre>\n              </div>\n            </div>\n          \n<p>I have additionally chosen to make use of <code>include RSpec::Matchers</code> within the above examples in order to use RSpec's expectation library.</p>\n<p>Some purists may follow the convention that Page Objects should <em>not</em> have inbuilt expectations. However I preference this approach in order to rely on Capybara's inbuilt mechanisms to handle race conditions where appropriate.</p>\n<p>For instance with the following code, Capybara will wait until <code>foo</code> is present within the page object, or it will fail:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">expect(self).to have_content &#39;foo&#39;</code></pre>\n              </div>\n            </div>\n          \n<p>However, within the following code:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">expect(page_object.content).to match &#39;foo&#39;</code></pre>\n              </div>\n            </div>\n          \n<p>It is possible to have unexpected race conditions as <code>page_object.content</code> is immediately evaluated, and potentially not valid yet, and asserted upon. For more examples, I would recommend reading thoughtbot's <a href=\"https://robots.thoughtbot.com/write-reliable-asynchronous-integration-tests-with-capybara#checking-a-field39s-value\">writing reliable asynchronous integration tests with capayara</a>.</p>\n<h3 id=\"adding-methods\"><a href=\"#adding-methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding methods</h3>\n<p>We can abstract the location that we wish to visit within a single method:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">def visit_location\n  visit &#39;/blogs/new&#39;\n  # It can be beneficial to assert something positive about the page\n  # before progressing with your tests at this point\n  #\n  # This can be useful to ensures that the page has loaded successfully, and any\n  # asynchronous JavaScript has been loaded and retrieved etc.\n  #\n  # This is required to avoid potential race conditions.\n  expect(self).to have_loaded\nend\n\ndef has_loaded?\n  self.has_selector? &#39;h1&#39;, text: &#39;Create Blog&#39;\nend</code></pre>\n              </div>\n            </div>\n          \n<p>It is important to provide semantically clear methods to your page objects:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">def create(title:, text:)\n  # ...\nend\n\ndef has_errors?(*errors)\n  # ...\nend\n\ndef has_error?(error)\n  # ...\nend</code></pre>\n              </div>\n            </div>\n          \n<p>In general it is important to follow provide <a href=\"https://en.wikipedia.org/wiki/Cohesion_(computer_science)\">functionally cohesive methods</a>, and where possible adhere to the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">Single Responsibility Principle</a>.</p>\n<h3 id=\"component-objects\"><a href=\"#component-objects\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component Objects</h3>\n<p>In our example we are making use of a <code>NewBlog</code> class, but the implementation for <code>create</code> was missing.</p>\n<p>As we are interacting with a form, we could additionally introduce a class to represent this component:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\"># ...\n\ndef create(title:, text:)\n  blog_form.new.create title: title,\n                       text: text\nend\n\n# ...\n\nprivate\n\ndef blog_form\n  ::Components::BlogForm\nend</code></pre>\n              </div>\n            </div>\n          \n<p>Where the implementation for <code>BlogForm</code> might be:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">module Components\n  class BlogForm\n    include RSpec::Matchers\n    include Capybara::DSL\n\n    def create(title:, text:)\n      within blog_form do\n        fill_in &#39;blog_title&#39;, with: title\n        fill_in &#39;blog_text&#39;, with: text\n\n        click_on &#39;Save Blog&#39;\n      end\n    end\n\n    private\n\n    def blog_form\n      find(&#39;.blog--new&#39;)\n    end\n  end\nend</code></pre>\n              </div>\n            </div>\n          \n<h3 id=\"wiring-everything-together\"><a href=\"#wiring-everything-together\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wiring everything together</h3>\n<p>With the above classes, it will now be possible to require and instantiate your page objects within your feature spec:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">require &#39;feature_helper&#39;\nrequire_relative &#39;../pages/new_blog&#39;\nrequire_relative &#39;../pages/view_blog&#39;\n\nfeature &#39;Blog management&#39;, type: :feature do\n  let(:new_blog_page) { ::Pages::NewBlog.new }\n  let(:view_blog_page) { ::Pages::ViewBlog.new }\n\n  # ...\nend</code></pre>\n              </div>\n            </div>\n          \n<p><em>Note</em>: I have intentionally chosen to require the page object manually at the top of the feature file. In some RSpec applications it may be convenient to auto-load all support files and provide access to them within feature files, however this can become overwhelming with large code bases. In particular it will lead to slow start-up times, and potential unintentional cyclic dependencies.</p>\n<h3 id=\"calling-page-objects\"><a href=\"#calling-page-objects\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Calling page objects</h3>\n<p>Within each scenario we will now have access to the <code>new_blog_page</code> and <code>view_blog_page</code> instances:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">scenario &#39;Successfully creating a new blog&#39; do\n  new_blog_page.create title: &#39;My Blog Title&#39;,\n                       text: &#39;My new blog text&#39;\n\n  expect(view_blog_page).to have_loaded\n  expect(view_blog_page).to have_blog title: &#39;My Blog Title&#39;,\n                                      text: &#39;My new blog text&#39;\nend</code></pre>\n              </div>\n            </div>\n          \n<h3 id=\"naming-conventions--predicate-methods\"><a href=\"#naming-conventions--predicate-methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming Conventions / Predicate Methods</h3>\n<p>As with most things in Rails/Ruby, there are conventions that may not be fully appreciated at first sight.</p>\n<p>Within our tests we interacted with the page object with <code>have_loaded</code> and <code>have_blog</code>:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">expect(view_blog_page).to have_loaded\nexpect(view_blog_page).to have_blog title: &#39;My Blog Title&#39;,\n                                    text: &#39;My new blog text&#39;</code></pre>\n              </div>\n            </div>\n          \n<p>However, our page object's method names are actually <code>has_loaded?</code> and <code>has_blog?</code>:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-ruby\"><code class=\"language-ruby\">def has_loaded?\n  # ...\nend\n\ndef has_blog?(title:, text:)\n  # ...\nend</code></pre>\n              </div>\n            </div>\n          \n<p>This is a subtle difference to notice, and attention should be drawn to it. For more details on this convention, I would recommend the <a href=\"https://relishapp.com/rspec/rspec-expectations/v/3-5/docs/built-in-matchers/predicate-matchers\">predicate matchers</a> documentation.</p>\n<h3 id=\"source-code\"><a href=\"#source-code\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source code</h3>\n<p>For a full example please see the Github pull request <a href=\"https://github.com/AlanFoster/rspec-capybara-feature-testing/pull/13/files\">here</a></p>\n<h3 id=\"additional-resources\"><a href=\"#additional-resources\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional resources</h3>\n<ul>\n<li><a href=\"https://martinfowler.com/bliki/PageObject.html\">Martin Fowler - Page Objects</a></li>\n<li><a href=\"https://robots.thoughtbot.com/write-reliable-asynchronous-integration-tests-with-capybara\">Write Reliable, Asynchronous Integration Tests With Capybara</a></li>\n<li><a href=\"https://github.com/natritmeyer/site_prism\">Page object DSL for capybara</a></li>\n<li><a href=\"https://github.com/thoughtbot/formulaic\">Formulaic - Form input generation</a></li>\n</ul>","frontmatter":{"title":"Feature testing with Capybara page objects","date":"31 May, 2017"},"fields":{"slug":"/posts/feature-testing-with-capybara-page-objects/","editURL":"https:/github.com/AlanFoster/alanfoster.github.io/edit/develop/src/pages/posts/feature-testing-with-capybara-page-objects/index.markdown"}}},"pageContext":{"sidebarPath":null,"slug":"/posts/feature-testing-with-capybara-page-objects/"}}