{"data":{"markdownRemark":{"html":"<p>I often see a lot of java programs which make use of enums for finite state machines. They perform logic based on switch statements. For instance they may do:</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-java\"><code class=\"language-java\">protected enum State {\n  FOO, BAR;\n}\n\npublic static void main(String[] args) {\n  State currentState = State.FOO;\n  switch (currentState) {\n    case FOO :\n      // Perform specific logic\n      break;\n    case BAR :\n      // Perform specific logic\n      break;\n  }\n}</code></pre>\n              </div>\n            </div>\n          \n<p>Sure, this is fine. But it's not exactly very flexible is it? It's not taking advantage of the fact that enums can offer logic within the enum itself. For instance enums can offer a public abstract void method, which all enum constants must override and implement logic to.</p>\n<p>For instance</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-java\"><code class=\"language-java\">protected enum State {\n  FOO {\n    @Override\n    protected void logic() {\n      // Perform specific logic\n    }\n  },\n  BAR {\n    @Override\n    protected void logic() {\n      // Perform specific logic\n    }\n  };\n\n  protected abstract void logic();\n}</code></pre>\n              </div>\n            </div>\n          \n<p>This means we can now execute our logic by doing</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-java\"><code class=\"language-java\">public static void main(String[] args) {\n  State currentState = State.FOO;\n  currentState.logic();\n}</code></pre>\n              </div>\n            </div>\n          \n<p>Therefore it doesn't take much imagination to take this a step further and implement an 'actual' Java state machine such as</p>\n\n            <div class=\"code-snippet\">\n              \n              <div class=\"gatsby-highlight\">\n                <pre class=\"language-java\"><code class=\"language-java\">protected enum State {\n  FOO {\n    int i;\n    @Override\n    protected State execute() {\n      return i++ &gt;= 2 ? BAR : this;\n    }\n  },\n\n  BAR {\n    int i = 0;\n    @Override\n    protected State execute() {\n      return i++ == 0 ? FOO : HALT;\n    }\n  },\n\n  HALT {\n    @Override\n    protected State execute() {\n      return null;\n    }\n  };\n\n  protected abstract State execute();\n}\n\npublic static void main(String[] args) {\n  State currentState = State.FOO;\n  while((currentState = currentState.execute()) != State.HALT) {\n    System.out.println(currentState);\n  }\n}</code></pre>\n              </div>\n            </div>\n          \n<p>Hopefully this helps someone learn a bit more about enums, and potentially how to implement a finite state machine in java using enums.</p>","frontmatter":{"title":"Implementing Finite State Machines using Java's enums","date":"22 January, 2012"},"fields":{"slug":"/posts/implementing-finite-state-machines-using-java-enum/","editURL":"https:/github.com/AlanFoster/alanfoster.github.io/edit/develop/src/pages/posts/implementing-finite-state-machines-using-java-enum/index.markdown"}}},"pageContext":{"sidebarPath":null,"slug":"/posts/implementing-finite-state-machines-using-java-enum/"}}